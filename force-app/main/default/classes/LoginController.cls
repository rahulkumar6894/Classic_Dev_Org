global with sharing class LoginController {

    global string TwillioAccountSid = 'TWILIO_ACCOUNT_SID';
    global string TwillioToken = 'TWILIO_AUTH_TOKEN';
    global string FromPhoneNumber = 'TWILIO_PHONE_NUMBER';

    global String client_id = 'CONNECTED_APP_CLIENT_ID';
    
    global String input {get; set;}
   
    public String startURL  {get; set;}
    public String siteURL  {get; set;}

    public String OTP_OUT {get; set;} // OTP generated by the server
    public String OTP_IN {get; set;}  // OTP provided by the user
    
    public Boolean IsDiscovery {get; set;}
    public Boolean IsOTPChallenged {get; set;} 
    public Boolean IsBack {get; set;}
    
    public String username;
    
    public String expid {get; set;}
    
    public String label;
    public String error;
    
    public Component.Apex.OutputPanel outPanel; 
    
    global LoginController()
    {
        if (startURL == null) startURL = '/';
       
        invokeDiscovery();
        
        expid = ApexPages.currentPage().getParameters().get('expid');
    }
    
    global String getEncodedSiteUrl() {
        return EncodingUtil.urlEncode(siteURL, 'UTF-8');
    }
    
    global String getEncodedStartUrl() {
        return EncodingUtil.urlEncode(startURL, 'UTF-8');
    }
    
    global void invokeDiscovery() {
        IsDiscovery = true; 
        IsOTPChallenged = false;
        IsBack = false;
        
        label= 'Enter Phone no';
    }
    
    global void invokeSMS(String phone_no) {
        IsDiscovery = false; 
        IsOTPChallenged = true;
        IsBack = true;
        
        label= 'Enter the verification code';
        
        sendOTP(phone_no);
    }
      
    global PageReference verify() {
    
        IsOTPChallenged = true;
        label= 'Enter the verification code';
        
        
        if(OTP_OUT != OTP_IN)
        {
            error = 'Invalid code';
            return null;
        }
 
        return JWTlogin();
    } 
    
    global PageReference JWTlogin() {
        
        String token = getAccessToken();
    
        return new PageReference('https://brand-developer-edition.gus.force.com/secur/frontdoor.jsp?sid=' + token);
    }
    
    global PageReference login() {
    
        // Empty input
        if(input == null || input == '')
        {
            error = 'Enter Username or Email';
            return null;
        }
        
        List<User> users = null;
        
        users = [select name, username, email from User where communitynickname=:input ];
        if(users == null || users.isEmpty() == true)
        {
            error = 'Can\'t find a user';
            return null;
        }
        
        username = users[0].username;
        
        invokeSMS(input);
          
        return null;
    } 
    
    public Component.Apex.OutputPanel getTheDiscoveryPanel() {
        Component.Apex.OutputPanel outPanel = new Component.Apex.OutputPanel();
        Component.Apex.InputText inputTxt = new Component.Apex.InputText();
        
        inputTxt.expressions.value = '{!input}';
        
        Component.Apex.commandLink cmdLink = new Component.Apex.commandLink();
        cmdLink.value = 'NEXT';
        cmdLink.styleClass = 'signInButton';
        cmdLink.expressions.action = '{! login }';
        //cmdLink.expressions.reRender = '{labelPanel}';
        
        Component.Apex.outputLabel errorLabel = new Component.Apex.outputLabel();
        errorLabel.styleClass = 'error';
        errorLabel.value = error;
        errorLabel.id = 'errorlabel';
        
        outPanel.childComponents.add( inputTxt );
        outPanel.childComponents.add( errorLabel );
        outPanel.childComponents.add( cmdLink );
        
        return outPanel;
    }
    
    public Component.Apex.OutputPanel getTheOTPPanel() {
        Component.Apex.OutputPanel outPanel = new Component.Apex.OutputPanel();
        
        Component.Apex.InputText inputTxt = new Component.Apex.InputText();
        inputTxt.expressions.value = '{!OTP_IN}';
        
        Component.Apex.commandLink cmdLink = new Component.Apex.commandLink();
        cmdLink.value = 'NEXT';
        cmdLink.styleClass = 'signInButton';
        cmdLink.expressions.action = '{! verify }';
        
        outPanel.childComponents.add( inputTxt );
        outPanel.childComponents.add( cmdLink );

        
        return outPanel;
    }
    
    public Component.Apex.OutputPanel getTheLabelPanel() {
        Component.Apex.OutputPanel outPanel = new Component.Apex.OutputPanel();
        
        Component.Apex.outputLabel outputLabel = new Component.Apex.outputLabel();
        outputLabel.styleClass = 'style';
        outputLabel.value = label;
        outputLabel.id = 'labelPanel';
                
        outPanel.childComponents.add( outputLabel );
     
        return outPanel;
    }
    
    public Component.Apex.OutputPanel getTheErrorPanel() {
        Component.Apex.OutputPanel outPanel = new Component.Apex.OutputPanel();
        
        Component.Apex.outputLabel outputLabel = new Component.Apex.outputLabel();
        //outputLabel.styleClass = 'itzik';
        outputLabel.value = error;
        outputLabel.id = 'errorPanel';
                
        outPanel.childComponents.add( outputLabel );
       
        return outPanel;
    }
    
    public Component.Apex.OutputPanel getTheFooterPanel() {
        Component.Apex.OutputPanel outPanel = new Component.Apex.OutputPanel();
        Component.Apex.commandLink cmdLink = new Component.Apex.commandLink();
        
        cmdLink.value = 'Back';
        cmdLink.styleClass = 'footer';
        
        cmdLink.expressions.action = '{!invokeDiscovery}';
        
        outPanel.childComponents.add( cmdLink );
      
        return outPanel;
    }
    
    global String getAccessToken()
    {
        String token_endpoint = 'https://brand-developer-edition.gus.force.com/services/oauth2/token';
        
        String token;
        Auth.JWS jws;
        
        Auth.JWT jwt = new Auth.JWT();
     
        jwt.setIss(client_id);
        jwt.setSub(username);
        jwt.setAud('https://brand-developer-edition.gus.force.com');
        Map<String,String> claims = new  Map<String,String>();   
        
        jws = new Auth.JWS(jwt, 'JWT_Key');

        Auth.JWTBearerTokenExchange bearer = new Auth.JWTBearerTokenExchange(token_endpoint, jws);

        String accessToken = bearer.getAccessToken();
        
        return accessToken;
    }
    
    global void sendOTP(string phone_no)
    {
      /*  TwilioRestClient client = new TwilioRestClient(TwillioAccountSid, TwillioToken);
        TwilioSMS sms;
        
        String Message = 'Your <COMMUNITY NAME> verification code is: ';
    
        Integer rand = Math.round(Math.random()*100000);
        OTP_OUT = string.valueOf(rand);
        String Body = Message + OTP_OUT;
    
        Map<String,String> params = new Map<String,String> {
            'To'   => phone_no,
            'From' => FromPhoneNumber, 
            'Body' => Body
        }; 
 
 
        try {
            sms = client.getAccount().getSMSMessages().create(params);
        } catch(Exception ex) {
            system.debug('Failed to deliver SMS');
        }*/
     }
}