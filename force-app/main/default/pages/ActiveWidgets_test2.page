<apex:page >
    
    <!--
        var myCells = [];  
        myCells.push({ 
                        "AccountName" : records1[i].Name,
                        "AccountNo"  : records1[i].AccountNumber,
                        "Type"       : records1[i].Type 
                    });
    -->
    
    
    <!--   Example2   -->
    <apex:includeScript value="{!URLFOR($Resource.ActiveWidgetsRes,'/ActiveWidgets/runtime/lib/aw.js')}" />
    <apex:stylesheet value="{!URLFOR($Resource.ActiveWidgetsRes,'/ActiveWidgets/runtime/styles/aqua/aw.css')}" />
        
    <style type="text/css">
        #myGrid {height: 300px; width: 100%;}
        #myGrid .aw-alternate-even {background: #efe}
        #myGrid .aw-alternate-odd {background: #def} 
        #myGrid .aw-grid-row {border-bottom: 1px solid #ccc}    /* horizontal lines */
        #myGrid .aw-grid-cell {border-right: 1px solid #ccc}  /* vertical lines for all columns */
        /* #myGrid .aw-column-0  {border-right: 1px dashed #999} for one column */ 
    </style>
    
    <script src="../../soap/ajax/36.0/connection.js" type="text/javascript"></script>
    <script type="text/javascript">
        sforce.connection.sessionId='{!GETSESSIONID()}';
    </script> 
    <script type="text/javascript">
        try{
            var query = "SELECT Id, Name, AccountNumber, Type, Industry, Rating, Phone, Fax, SLAExpirationDate__c, CreatedDate FROM Account"; 
            var records = sforce.connection.query(query); 
            var records1 = records.getArray('records'); 
            // alert('records1.length::' + records1.length);
            
            var myHeaders = ['<input type="checkbox" id="headerchkbox" value="headerchkbox" onclick="headerChkBoxClick(this.value);">', "Account Name", "SLA Expiration Date", "Account No.", "Type", "Industry", "Rating", "Phone", "Fax"];
            var rowsData = new Array();
            for(var i=0; i < records1.length; i++){
                var p1 = records1[i].Id;
                var chkbox = '<input type="checkbox" id="' +i+ '" value="' +i+ '" onclick="oncolumnckeckboxclick (this.value);">';
                
                // date format
                var dateExp = null;
                if(records1[i].SLAExpirationDate__c != null) {
                    dateExp = (records1[i].SLAExpirationDate__c!=null?records1[i].SLAExpirationDate__c:'');
                    var value = new Date(dateExp);
                    dateExp = value.getMonth() + "/" + value.getDate() + "/" + value.getFullYear();
                    console.log('dateExp::' + dateExp);
                }
                var rowVal = [chkbox, records1[i].Name, dateExp, records1[i].AccountNumber, records1[i].Type, records1[i].Industry, records1[i].Rating, records1[i].Phone, records1[i].Fax];
                rowsData.push(rowVal);
            }             
            // alert('records1[i].CreatedDate::' + dateExp); 
                        
            
            var serial = 0; 
            // create grid object
            var obj = new AW.UI.Grid();            
            obj.setId("myGrid");
            obj.setStyle("width", "100%");
            obj.setStyle("height", "350px");
            
            //1 to display checkbox in header of column.  
            //var headerCheckbox = new AW.UI.Checkbox;
            //headerCheckbox.setEvent("onclick", headerChkBoxClick);
            //headerCheckbox.setControlValue(false); 
            //obj.setHeaderTemplate(headerCheckbox, 0); // here 0 is column no., in which we have to show checkbox.
            /*2 to display checkbox in each columns.
            var columnCheckkBox = new AW.Templates.Checkbox;
            columnCheckkBox.setEvent("onclick", columnChkBoxClick);
            obj.setCellTemplate(columnCheckkBox, 0);
            */
            //3 call when switching from 1 row to other row.
            obj.onSelectedRowsChanged = function(rowIndicesArray){
                //alert('onSelectedRowsChanged ::' + rowIndicesArray);
            }
            //obj.setSelectionMode("multi-row-marker");  // to disp checkbox in first column of table.
                        
            /* Abhi
            var objGridHeaderChkBox = new AW.UI.Checkbox;
            objGridHeaderChkBox.setEvent("onclick", objGridToggleAllChkBoxes);
            objGridHeaderChkBox.setControlValue(false);             
            obj.setHeaderTemplate(objGridHeaderChkBox, 0);
            
            var objGridCellChkBox = new AW.Templates.Checkbox;
            AW.UI.Grid.prototype.setEvent("oncontextmenu", "");
            objGridCellChkBox.setEvent("onclick", objGridCellChkBoxClickHandler);            
            obj.setCellTemplate(objGridCellChkBox, 0);
            */
            
            // assign cells and headers text
            obj.setCellText(rowsData);    // to display table row's data
            obj.setHeaderText(myHeaders); // to display table header/column's name
            
            // set number of columns/rows
            obj.setColumnCount(myHeaders.length); // to set no. of column to display.
            obj.setRowCount(rowsData.length);     // to set no. of rows to display.
            serial = rowsData.length;
            
            /* date converter
            var date = new AW.Formats.Date;
            date.setDataFormat("ISO8601");
            date.setTextFormat("dd-mmm-yyyy");
            obj.setCellFormat(date, 2);
            */
            //  define data formats
            var str = new AW.Formats.String;
            var num = new AW.Formats.Number;            
            var dte = new AW.Formats.Date;             
            //obj.setCellFormat([str, str, dte, num, str, str, str, str, str]);
            
            
            var string = new AW.Formats.String;
            var number = new AW.Formats.Number;
            var date = new AW.Formats.Date;        
            number.setTextFormat("#,###.##");
            date.setDataFormat("ISO8601");
            date.setTextFormat("mmm d, yyyy");
            
            obj.setCellFormat([string , string , date, number, string , string , string , string , string ]);
            
            /*  enable row selectors (S.No. for each row)
            obj.setSelectorVisible(true);
            obj.setSelectorText(function(i){return this.getRowPosition(i+1)}); // to show S.No. of row.
            obj.setSelectorWidth(35);  // width of this column
            */
            
            // write grid to the page
            document.write(obj);
            
            // call from click of any header box
            obj.onHeaderClicked = function(event, column){                
                //alert(this.getHeaderText(column));
            }
            
            // to add new row in table.
            function addRow(){
                obj.addRow(serial++);
            }
            obj.onRowAdded = function(row){
                var pos = row+1;
                alert("Row added: " + pos);
                //window.status = "Row added: " + row;
                this.setCellText("new", 0, row);            
            }  
            
            // to delete selected row from table.
            function delRow(){
                var i = obj.getCurrentRow();                
                obj.deleteRow(i);
            }
            obj.onRowDeleting = function(row){
                var pos = row;
                pos++;
                return !confirm("Delete row:" + pos + "?");
            }
            obj.onRowDeleted = function(row){
                serial--;
                obj.refresh();
                // window.status = "Row deleted: " + row;
            }                                                   
            
            /*
            function headerChkBoxClick() {
                alert('headerChkBoxClick headerChkBoxClick');
                
            }
            function columnChkBoxClick(){
                // alert('columnChkBoxClick columnChkBoxClick');
            }
            */
            
            obj.onHeaderClicked = function(event, index) {
                // to disable sorting for particular column.
                if(index == 0) {
                    return 'disabled';
                }
            }
            
            //1. for header checkbox.
            function headerChkBoxClick(param) {
                /*
                var vall;
                alert('param:' + param);                               
                for(i=0; i<rowsData.length; i++){
                   var vall = document.getElementById(rowsData[i]).value;
                    //var indx = records1[i].Id;                                             
                }
                alert('vall==' + vall);
                */
                //debugger;
                if(document.getElementById('headerchkbox').checked){
                    alert('ttttt');
                    for(i=0; i<rowsData.length; i++){                         
                         document.getElementById(i).checked = true;
                    }
                }
                else{
                    alert('ffffff');
                    for(i=0; i<rowsData.length; i++){                         
                         document.getElementById(i).checked = false;
                    }
                }
                document.getElementById("test").focus(); 
                document.getElementById("test").blur();
                                               
            }
            //2. for each row checkbox
            function oncolumnckeckboxclick (param) {
                // alert('param::' + param);
                // alert('rowsData[param]::' + rowsData[param]);
                
                if(document.getElementById(param).checked) {
                    alert('t');
                    alert('rowsData[param][2]::' + rowsData[param][2]);                    
                    alert('records1[param].Id::' + records1[param].Id);
                }
                else {
                    alert('f');
                    document.getElementById('headerchkbox').checked = false;
                }
            }
            
                        
            /*
            var accountNames = '';
            for(var i=0;i<records1.length;i++){ 
                accountNames = accountNames + records1[i].Name + ','; 
            }
            // alert(accountNames); 
            if(records1.length == 1){ 
                alert('1 record');
            }
            if(records1.length > 1){ 
                alert('more than 1 record');
            }
            */
        } 
        catch(e){ 
            console.log('An Error has Occured i.e Error:' +e); 
        }
    </script>
    
    <!--
    <br/><br/><br/>
    <button onclick="addRow()">add row</button>
    <br/><br/>
    <button onclick="delRow()">delete row</button>
    -->
    <input type="text" id="test" style="height:0px;width:0px;border: aliceblue;" />
</apex:page>